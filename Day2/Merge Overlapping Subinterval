//Appraoch : Sort 
// traverse and check the first of current with second of prev and take makimum of it 

class Solution {
   public int[][] merge(int[][] intervals) {  
        // sort based on starting point
        Arrays.sort(intervals, (a,b) -> a[0] - b[0]);
        
        ArrayList<int[]> list = new ArrayList<>();
        
        for(int[] interval : intervals){
            if(list.size() == 0) {
                list.add(interval);
            }else {
                int prevInterval[] = list.get(list.size() - 1);
                if(interval[0] <= prevInterval[1] ){
                    /*
                    1. my starting point is < prev interval's ending point
                    2. my starting point == prev interval's ending point
                    in both the cases, I will update the ending point, means case of overlapping !
                    */
                    //upating ending point
                    prevInterval[1] = Math.max(interval[1], prevInterval[1]);
                }
                else {
                    list.add(interval);
                }
            }
        }
        
        return list.toArray(new int[list.size()][2]);
        
    }
}